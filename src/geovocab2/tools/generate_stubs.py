# src/geovocab2/tools/generate_stubs.py
"""
Stub file generator for IDE autocomplete support.
Run this after adding new formulas, factories, or synthesizers.
"""

import inspect
import pkgutil
import importlib
from pathlib import Path
from typing import Type


def generate_formula_stubs():
    """Generate .pyi stub for shapes/formula package."""
    from ..shapes.formula.formula_base import FormulaBase

    formula_init = Path(__file__).parent.parent / "shapes" / "formula" / "__init__.py"
    stub_path = formula_init.with_suffix('.pyi')

    lines = [
        '"""Auto-generated type stub for IDE support - DO NOT EDIT MANUALLY"""\n',
        '# Generated by: python -m geovocab2.tools.generate_stubs\n\n',
        'from .formula_base import FormulaBase\n\n'
    ]

    # Scan subdirectories
    formula_path = formula_init.parent
    for subdir in sorted(formula_path.iterdir()):
        if subdir.is_dir() and not subdir.name.startswith('_'):
            lines.append(f'# {subdir.name}\n')

            for py_file in sorted(subdir.glob('*.py')):
                if py_file.stem.startswith('_'):
                    continue

                module_path = f"geovocab2.shapes.formula.{subdir.name}.{py_file.stem}"
                try:
                    module = importlib.import_module(module_path)
                    classes = [
                        name for name, obj in inspect.getmembers(module, inspect.isclass)
                        if issubclass(obj, FormulaBase) and obj is not FormulaBase
                    ]

                    if classes:
                        lines.append(f'from .{subdir.name}.{py_file.stem} import (\n')
                        for cls in sorted(classes):
                            lines.append(f'    {cls},\n')
                        lines.append(')\n')
                except Exception as e:
                    print(f"Warning: Could not import {module_path}: {e}")

            lines.append('\n')

    lines.append('__all__: list[str]\n')

    stub_path.write_text(''.join(lines))
    print(f"✓ Generated {stub_path}")
    return stub_path


def generate_factory_stubs():
    """Generate .pyi stub for shapes/factory package."""
    from ..shapes.factory.factory_base import FactoryBase

    factory_init = Path(__file__).parent.parent / "shapes" / "factory" / "__init__.py"
    stub_path = factory_init.with_suffix('.pyi')

    lines = [
        '"""Auto-generated type stub for IDE support - DO NOT EDIT MANUALLY"""\n',
        '# Generated by: python -m geovocab2.tools.generate_stubs\n\n',
        'from .factory_base import FactoryBase\n\n'
    ]

    factory_path = factory_init.parent
    for py_file in sorted(factory_path.glob('*.py')):
        if py_file.stem.startswith('_') or py_file.stem == 'factory_base':
            continue

        module_path = f"geovocab2.shapes.factory.{py_file.stem}"
        try:
            module = importlib.import_module(module_path)
            classes = [
                name for name, obj in inspect.getmembers(module, inspect.isclass)
                if issubclass(obj, FactoryBase) and obj is not FactoryBase
            ]

            if classes:
                lines.append(f'from .{py_file.stem} import (\n')
                for cls in sorted(classes):
                    lines.append(f'    {cls},\n')
                lines.append(')\n')
        except Exception as e:
            print(f"Warning: Could not import {module_path}: {e}")

    lines.append('\n__all__: list[str]\n')

    stub_path.write_text(''.join(lines))
    print(f"✓ Generated {stub_path}")
    return stub_path


def generate_fusion_stubs():
    """Generate .pyi stub for fusion package."""
    fusion_init = Path(__file__).parent.parent / "fusion" / "__init__.py"
    stub_path = fusion_init.with_suffix('.pyi')

    # Read existing __init__.py to extract exports
    init_content = fusion_init.read_text()

    lines = [
        '"""Auto-generated type stub for IDE support - DO NOT EDIT MANUALLY"""\n',
        '# Generated by: python -m geovocab2.tools.generate_stubs\n\n',
    ]

    # Extract imports from actual __init__.py
    for line in init_content.split('\n'):
        if line.startswith('from .') or line.startswith('import'):
            lines.append(line + '\n')

    if '__all__' in init_content:
        lines.append('\n__all__: list[str]\n')

    stub_path.write_text(''.join(lines))
    print(f"✓ Generated {stub_path}")
    return stub_path


def main():
    """Generate all stub files."""
    print("Generating stub files for IDE autocomplete...\n")

    try:
        generate_formula_stubs()
        generate_factory_stubs()
        generate_fusion_stubs()

        print("\n✓ All stubs generated successfully!")
        print("\nRestart PyCharm or run 'File → Invalidate Caches' for changes to take effect.")

    except Exception as e:
        print(f"\n✗ Error generating stubs: {e}")
        import traceback
        traceback.print_exc()
        return 1

    return 0


if __name__ == '__main__':
    exit(main())