╔══════════════════════════════════════════════════════════════════════════════╗
║                     MODULAR TRAINING SYSTEM ARCHITECTURE                     ║
║                         with TrainBase Integration                           ║
╚══════════════════════════════════════════════════════════════════════════════╝

┌──────────────────────────────────────────────────────────────────────────────┐
│                          USER INTERFACE LAYER                                │
└──────────────────────────────────────────────────────────────────────────────┘

        Option A: TrainBase Contract          Option B: Direct Modular Use
        ┌────────────────────────┐            ┌─────────────────────────┐
        │   SD15FlowTrainer      │            │   Custom Experiment     │
        │   (TrainBase impl)     │            │   Script                │
        │                        │            │                         │
        │  • get_model()         │            │  Uses components        │
        │  • get_loss()          │            │  directly               │
        │  • get_datasets()      │            │                         │
        │  • train()             │            └─────────────────────────┘
        │  • validate()          │                      │
        │  • test()              │                      │
        │  • to()                │                      │
        │  • info()              │                      │
        └────────────────────────┘                      │
                 │                                      │
                 │ Uses internally                      │
                 ▼                                      ▼
┌──────────────────────────────────────────────────────────────────────────────┐
│                        COORDINATION LAYER                                    │
└──────────────────────────────────────────────────────────────────────────────┘

                        ┌────────────────────────┐
                        │     ARBITRATOR         │
                        │  (Central Coordinator) │
                        │                        │
                        │  • Model management    │
                        │  • Loss coordination   │
                        │  • Data delegation     │
                        │  • Training control    │
                        └────────────────────────┘
                                   │
                   ┌───────────────┼───────────────┐
                   ▼               ▼               ▼
         ┌─────────────┐  ┌─────────────┐  ┌─────────────┐
         │   Models    │  │   Losses    │  │    Data     │
         │  Registry   │  │  Composer   │  │   Factory   │
         └─────────────┘  └─────────────┘  └─────────────┘

┌──────────────────────────────────────────────────────────────────────────────┐
│                           MODEL LAYER                                        │
└──────────────────────────────────────────────────────────────────────────────┘

    ┌──────────────┐      ┌──────────────┐      ┌──────────────┐
    │   TEACHER    │      │   STUDENT    │      │  ASSISTANT   │
    │   (Frozen)   │      │  (Trainable) │      │   (Frozen)   │
    │              │      │              │      │              │
    │  • Features  │      │  • Features  │      │  • Assess    │
    │  • Targets   │      │  • Aux heads │      │  • Guide     │
    │  • Hooks     │      │  • Train     │      │  • Losses    │
    └──────────────┘      └──────────────┘      └──────────────┘
          │                      │                      │
          │                      │                      │
          ▼                      ▼                      ▼
    ┌──────────────┐      ┌──────────────┐      ┌──────────────┐
    │  SD15Teacher │      │  SD15Student │      │DavidAssistant│
    │              │      │              │      │              │
    │  • UNet      │      │  • UNet      │      │  • David     │
    │  • TextEnc   │      │  • Local     │      │  • Adaptive  │
    │  • Scheduler │      │    heads     │      │    weights   │
    └──────────────┘      └──────────────┘      └──────────────┘

┌──────────────────────────────────────────────────────────────────────────────┐
│                          TRAINING LAYER                                      │
└──────────────────────────────────────────────────────────────────────────────┘

                        ┌────────────────────────┐
                        │    TRAINER CORE        │
                        │  (Training Loop)       │
                        │                        │
                        │  • Epoch iteration     │
                        │  • Optimization        │
                        │  • AMP handling        │
                        │  • Gradient clipping   │
                        │  • Logging             │
                        └────────────────────────┘
                                   │
                    ┌──────────────┼──────────────┐
                    ▼              ▼              ▼
            ┌─────────────┐ ┌─────────────┐ ┌─────────────┐
            │   Forward   │ │    Loss     │ │   Backward  │
            │   Function  │ │  Composer   │ │   + Step    │
            └─────────────┘ └─────────────┘ └─────────────┘

┌──────────────────────────────────────────────────────────────────────────────┐
│                          LOSS LAYER                                          │
└──────────────────────────────────────────────────────────────────────────────┘

                        ┌────────────────────────┐
                        │   LOSS COMPOSER        │
                        │  (Composable Losses)   │
                        └────────────────────────┘
                                   │
        ┌──────────────┬───────────┼───────────┬──────────────┐
        ▼              ▼           ▼           ▼              ▼
   ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐  ┌─────────┐
   │  Flow   │  │   KD    │  │  David  │  │  Local  │  │ Custom  │
   │  Loss   │  │  Loss   │  │ Penalty │  │  Flow   │  │  Loss   │
   │         │  │         │  │         │  │         │  │         │
   │ w=1.0   │  │ w=0.25  │  │ w=0.125 │  │ w=1.0   │  │ w=0.5   │
   └─────────┘  └─────────┘  └─────────┘  └─────────┘  └─────────┘

┌──────────────────────────────────────────────────────────────────────────────┐
│                        PERSISTENCE LAYER                                     │
└──────────────────────────────────────────────────────────────────────────────┘

                        ┌────────────────────────┐
                        │   CHECKPOINTER         │
                        │  (Save/Load/Upload)    │
                        │                        │
                        │  • Safetensors         │
                        │  • HuggingFace Hub     │
                        │  • Model cards         │
                        │  • Config mgmt         │
                        └────────────────────────┘
                                   │
                    ┌──────────────┼──────────────┐
                    ▼              ▼              ▼
            ┌─────────────┐ ┌─────────────┐ ┌─────────────┐
            │   Local     │ │  HF Hub     │ │   Model     │
            │   Disk      │ │   Upload    │ │    Card     │
            └─────────────┘ └─────────────┘ └─────────────┘

═══════════════════════════════════════════════════════════════════════════════

DATA FLOW: Training Step

1. Batch → Forward Function
   ├─→ Encode text (Teacher)
   ├─→ Generate latents
   ├─→ Teacher forward (with features) → targets
   └─→ Student forward (with features) → predictions

2. Outputs → Loss Composer
   ├─→ Flow Loss: MSE(v_pred, v_target)
   ├─→ KD Loss: CosineSim(student_feats, teacher_feats)
   ├─→ David Penalty: AdaptiveWeighted KD
   └─→ Local Flow: MSE(local_v_pred, v_target_downsampled)

3. Total Loss → Backward
   ├─→ Gradient computation
   ├─→ Gradient clipping
   └─→ Optimizer step

4. Logging
   └─→ TensorBoard + Console

═══════════════════════════════════════════════════════════════════════════════

COMPONENT INTERACTIONS

TrainBase Version:
  SD15FlowTrainer
      ├─ Uses Arbitrator internally
      ├─ Implements TrainBase methods
      └─ Exposes clean interface

  Arbitrator
      ├─ Registers Teacher, Student, Assistant
      ├─ Manages LossComposer
      ├─ Controls Trainer Core
      └─ Handles state management

  Trainer Core
      ├─ Training loop
      ├─ Calls Forward Function
      ├─ Computes losses via Composer
      └─ Optimization + logging

  Models (Teacher/Student/Assistant)
      ├─ Feature extraction via hooks
      ├─ Forward passes
      └─ Target/prediction generation

Standalone Version:
  User Script
      ├─ Creates models directly
      ├─ Configures Arbitrator manually
      ├─ Defines custom forward function
      └─ Full control over all components

═══════════════════════════════════════════════════════════════════════════════

FILE ORGANIZATION

Recommended Repository Structure:

geovocab2/
└── train/
    ├── train_base.py              # Your existing base class
    │
    ├── trainers/                  # TrainBase implementations
    │   ├── __init__.py
    │   └── sd15_flow_trainer.py   # ← New: SD15 trainer
    │
    └────── core/                      # Training infrastructure
            ├── __init__.py
            ├── trainer_core.py         # Core loop
            ├── arbitrator.py           # Coordination
            ├── checkpointing.py        # Persistence
            ├── assistant_model.py      # Assistants (David, etc.)
            ├── teacher_model.py        # Teachers (SD15, etc.)
            └── student_model.py        # Students

Alternative (Standalone):

project/
├── training_system/
│   ├── __init__.py
│   ├── trainer_core.py
│   ├── arbitrator.py
│   ├── checkpointing.py
│   ├── assistant_model.py
│   ├── teacher_model.py
│   └── student_model.py
│
└── experiments/
    └── sd15_flow_experiment.py

═══════════════════════════════════════════════════════════════════════════════

KEY DESIGN PRINCIPLES

1. SEPARATION OF CONCERNS
   Each component has one clear responsibility

2. COMPOSITION OVER INHERITANCE
   TrainBase trainer composes modular components

3. CONTRACT COMPLIANCE
   TrainBase methods satisfied while maintaining flexibility

4. OPEN/CLOSED PRINCIPLE
   Open for extension (subclass), closed for modification

5. DEPENDENCY INJECTION
   Components don't know about each other's internals

6. TESTABILITY
   Each component can be tested in isolation

═══════════════════════════════════════════════════════════════════════════════

EXTENSION POINTS

Want to add...                  Override/Create...
────────────────────────────────────────────────────────────────────────────
New loss function              → get_loss() + composer.register()
New dataset                    → get_datasets()
New model architecture         → New Teacher/Student wrapper class
New assessment system          → New AssistantModel subclass
Custom training logic          → train() method
Different optimizer            → ArbitratorConfig
Custom checkpointing           → CheckpointConfig

═══════════════════════════════════════════════════════════════════════════════